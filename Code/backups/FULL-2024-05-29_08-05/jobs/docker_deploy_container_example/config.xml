<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1400.v7fd111b_ec82f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2198.v41dd8ef6dd56">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>3</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>true</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableResumeJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>tag</name>
          <description>Docker Image Tag Version</description>
          <defaultValue>latest</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3894.3896.vca_2c931e7935">
    <script>pipeline {
    
    agent any
    
    stages {
        stage(&apos;Pull Image&apos;) {
            steps {
                sh &quot;docker pull gearpawarit/frontend:${tag}&quot;
            }
        }
        stage(&apos;Verify Image&apos;) {
            steps {
                sh &quot;docker images&quot;
            }
        }
        stage(&apos;Stop Exiting Container&apos;){
            steps {
                script {
                    def containerName = &apos;web&apos; // Replace with your container name
                    def existingContainer = sh(script: &quot;docker ps -aqf name=${containerName}&quot;, returnStdout: true).trim()
                    if (existingContainer) {
                        echo &quot;Existing container found. Stopping and removing...&quot;
                        sh &quot;docker stop ${containerName}&quot;
                        sh &quot;docker rm ${containerName}&quot;
                    }
                }
            }
        }
        stage(&apos;Start Container&apos;) {
            steps {
                sh &quot;docker run -d -p 80:80 --name web gearpawarit/frontend:${tag}&quot;
            }
        }
        stage(&apos;Check Container&apos;) {
            steps {
                sh &quot;docker ps&quot;
            }
        }
    }
}
    
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>